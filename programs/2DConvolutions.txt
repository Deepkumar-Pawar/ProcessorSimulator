
main:

    # some constants
    li $15, 4
    li $16, 2
    li $17, 5
    li $18, 3

    # Base addresses of matrices
    # Input matrix  (5x5)
    li $20, 0   # Base address of input matrix
    # Kernel matrix  (3x3)
    li $21, 25  # Base address of kernel matrix
    # Output matrix  (5x5)
    li $22, 50  # Base address of output matrix

    # Initialize input matrix  (5x5)
    li $0, 1
    sw $0, 0 ($20)
    li $0, 2
    sw $0, 1 ($20)
    li $0, 3
    sw $0, 2 ($20)
    li $0, 4
    sw $0, 3 ($20)
    li $0, 5
    sw $0, 4 ($20)

    li $0, 6
    sw $0, 5 ($20)
    li $0, 7
    sw $0, 6 ($20)
    li $0, 8
    sw $0, 7 ($20)
    li $0, 9
    sw $0, 8 ($20)
    li $0, 10
    sw $0, 9 ($20)

    li $0, 11
    sw $0, 10 ($20)
    li $0, 12
    sw $0, 11 ($20)
    li $0, 13
    sw $0, 12 ($20)
    li $0, 14
    sw $0, 13 ($20)
    li $0, 15
    sw $0, 14 ($20)

    li $0, 16
    sw $0, 15 ($20)
    li $0, 17
    sw $0, 16 ($20)
    li $0, 18
    sw $0, 17 ($20)
    li $0, 19
    sw $0, 18 ($20)
    li $0, 20
    sw $0, 19 ($20)

    li $0, 21
    sw $0, 20 ($20)
    li $0, 22
    sw $0, 21 ($20)
    li $0, 23
    sw $0, 22 ($20)
    li $0, 24
    sw $0, 23 ($20)
    li $0, 25
    sw $0, 24 ($20)

    # Initialize kernel matrix  (3x3)
    li $0, 1
    sw $0, 0 ($21)
    li $0, 2
    sw $0, 1 ($21)
    li $0, 1
    sw $0, 2 ($21)

    li $0, 0
    sw $0, 3 ($21)
    li $0, 0
    sw $0, 4 ($21)
    li $0, 0
    sw $0, 5 ($21)

    li $0, -1
    sw $0, 6 ($21)
    li $0, -2
    sw $0, 7 ($21)
    li $0, -1
    sw $0, 8 ($21)

    # Initialize output matrix  (5x5)
    li $0, 0
    sw $0, 0 ($22)
    sw $0, 1 ($22)
    sw $0, 2 ($22)
    sw $0, 3 ($22)
    sw $0, 4 ($22)

    sw $0, 5 ($22)
    sw $0, 6 ($22)
    sw $0, 7 ($22)
    sw $0, 8 ($22)
    sw $0, 9 ($22)

    sw $0, 10 ($22)
    sw $0, 11 ($22)
    sw $0, 12 ($22)
    sw $0, 13 ($22)
    sw $0, 14 ($22)

    sw $0, 15 ($22)
    sw $0, 16 ($22)
    sw $0, 17 ($22)
    sw $0, 18 ($22)
    sw $0, 19 ($22)

    sw $0, 20 ($22)
    sw $0, 21 ($22)
    sw $0, 22 ($22)
    sw $0, 23 ($22)
    sw $0, 24 ($22)

    # End of initialization

    # Your convolution code here...

    # Output stored in the output_matrix starting from address 50.


# Assuming the initialization code is above this line

# Convolution operation
# Iterate over each pixel in the output matrix
li $0, 0
outer_loop:
    bge $0, $15, end_program_outer_loop # If row index >= 5, end outer loop

    li $1, 0
    inner_loop:
        bge $1, $15, end_program_inner_loop # If column index >= 5, end inner loop

        # Calculate convolution for current pixel
        li $2, 0 # Initialize convolution result
        li $3, 0 # Initialize kernel row index
        kernel_loop:
            bge $3, $16, store_result # If kernel row index >= 3, store result

            li $4, 0 # Initialize kernel column index
            kernel_col_loop:
                bge $4, $16, next_kernel_col # If kernel column index >= 3, move to next column

                # Calculate memory indices for input and kernel elements
                mul $5, $0, $17 # Calculate offset for input row
                add $5, $5, $1 # Add column index to offset
                mul $6, $3, $18 # Calculate offset for kernel row
                add $6, $6, $4 # Add column index to offset
                lw $7, 0 ($20) # Load input element
                lw $8, 0 ($21) # Load kernel element
                mul $7, $7, $8 # Multiply input element by kernel element
                add $2, $2, $7 # Accumulate result

                addi $4, $4, 1 # Increment kernel column index
                jalb kernel_col_loop # Continue loop for kernel columns

            next_kernel_col:
            addi $3, $3, 1 # Increment kernel row index
            jalb kernel_loop # Continue loop for kernel rows

        store_result:
        # Store convolution result in output matrix
        mul $9, $0, $17 # Calculate offset for output row
        add $9, $9, $1 # Add column index to offset
        mul $10, $9, $15 # Calculate byte offset
        add $11, $22, $10 # Add base address of output
        sw $2, 0 ($11) # Store convolution result

        addi $1, $1, 1 # Increment column index
        jalb inner_loop # Continue loop for columns

    end_program_inner_loop:
    addi $0, $0, 1 # Increment row index
    jalb outer_loop # Continue loop for rows

end_program_outer_loop:
# End of convolution operation

# End of program
exit
main:
    # $30 will hold 0 and $31
    li $30, 0
    li $29, 1


    # initialise n
    li $0, 100              # Move input to $t0

    # Check if n < 2 (smallest prime is 2)
    # not really necessary
    li $1, 2
    blt $0, $1, end_program  # If n < 2, end program

    # let the sieve address be in $21 starting at 0 so the start of memory
    li $21, 0

    # Initialize the sieve array to 0 (all numbers are potential primes)
    li $1, 0            # $1 = 0 (loop index)
init_loop:
    bgt $1, $0, init_done    # If $1 > n, end loop
    sw $29, 0 ($21)        # sieve[$1] = 0 (not prime)
    addi $21, $21, 1     # Move to next byte in array
    addi $1, $1, 1           # Increment loop index
    jalb init_loop

init_done:
    li $21, 0           # Restore base address of sieve array
    li $1, 2                  # $1 = 2 (first prime)
    sw $30, 0 ($21)        # sieve[0] = 0 (not prime)
    sw $30, 1 ($21)        # sieve[1] = 0 (not prime)

sieve_loop:
    addi $12, $12, 1
    mul $2, $1, $1          # $2 = $1 * $1 (start eliminating multiples)
    bgt $2, $0, sieve_done   # If $1^2 > n, end loop

    addi $3, $2, 0              # $3 = $2 (start index for marking multiples)

inner_loop:
    bgt $3, $0, sieve_next   # If $3 > n, move to next $1
    add $5, $21, $3       # $$5 = address of sieve[$3]
    sw $30, 0 ($5)           # sieve[$3] = 0 (mark as not prime)
    add $3, $3, $1          # $3 += $1 (next multiple)
    jalb inner_loop

already_marked:
    add $3, $3, $1          # $3 += $1 (next multiple)
    jalb inner_loop

sieve_next:
    addi $1, $1, 1           # Increment $1 to check next number
    jalb sieve_loop

sieve_done:
    # do nothing
end_program:
    exit